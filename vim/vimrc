" General settings
set nocompatible                " Vim does not imitate vi
filetype plugin indent  on      " Detect file type, load plugins, etc
set number                      " Show line numbers
set hlsearch                    " High light search results
set encoding=utf-8
set tabstop=4                   " Number of spaces that a <Tab> in the file
                                " counts for.
set shiftwidth=4                " Number of spaces to use for each step of
                                " (auto)indent.  Used for |'cindent'|, |>>|,
                                " |<<|, etc.
set expandtab                   " Converting tabs to spaces
set laststatus=2                " Displaying status line always
"set foldmethod=indent           " method: manual, indent, syntax, expr
set foldnestmax=5
set cursorline
set cursorcolumn
set backspace=indent,eol,start
set backup                      " need to create ~/.vim/backup first
set backupdir=~/.vim/backup     " file~
set directory=~/.vim/backup     " swap file
set splitright                  " To make vsplit put the new buffer on the right of the current buffer

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/vundle'          " let Vundle manage Vundle, required
Plugin 'majutsushi/tagbar'      " :TagbarToggle
Plugin 'tpope/vim-markdown'     " markdown
Plugin 'vim-scripts/tComment'   " tComment (Type gcc to comment)
Plugin 'scrooloose/nerdtree'    " file manager
Plugin 'Xuyuanp/nerdtree-git-plugin'
let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "✹",
            \ "Staged"    : "✚",
            \ "Untracked" : "✭",
            \ "Renamed"   : "➜",
            \ "Unmerged"  : "═",
            \ "Deleted"   : "✖",
            \ "Dirty"     : "✗",
            \ "Clean"     : "✔︎",
            \ "Unknown"   : "?"
            \ }
Plugin 'kien/ctrlp.vim'         " powerful file searcher
Plugin 'bling/vim-airline'      " status line
let g:airline#extensions#tabline#enabled = 1
" enable tabline
Plugin 'vim-scripts/snipMate'   " snipMate
Plugin 'Yggdroot/indentLine'    " indentLine
let g:indentLine_char = '¦'     " line character
let g:indentLine_color_term = 239
let g:indentLine_enabled = 1
Plugin 'vim-scripts/togglenumber'
"Plugin 'axiaoxin/vim-json-line-format'
Plugin 'airblade/vim-gitgutter' " It shows whether each line has been added,
" modified, and where lines have been removed.
Plugin 'tpope/vim-fugitive'     " Use git cmds in vim
Plugin 'easymotion/vim-easymotion'
"Plugin 'ervandew/supertab'      " insert a literal <Tab> with <C-v><Tab>
Plugin 'Chiel92/vim-autoformat' " C, Python files autoformat (use ale for vim8)
Plugin 'davidhalter/jedi-vim'   " Python AutoComplete
" let g:jedi#completions_enabled = 1
" Plugin 'scrooloose/syntastic'   " Syntax Checker
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Plugin 'zdict/zdict.vim'
" let g:zdict_query_key = '<leader>z'
" Plugin '18z/infoparser'
" Plugin 'andviro/flake8-vim'
" let g:PyFlakeOnWrite = 1
Plugin 'vim-scripts/cscope.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'sjl/gundo.vim'
Plugin 'tpope/vim-surround'
Plugin 'fisadev/vim-isort'      " Vim plugin to sort python imports
" Plugin 'severin-lemaignan/vim-minimap'

" Color settings
syntax on                       " Show colors
set background=dark
colorscheme luthadel
" colorscheme vividchalk
set t_Co=256

" Keymap settings
" nnoremap n:normal mode, nore:no recursive, map:map

" Type \2 to show tabs and spaces
nnoremap    <leader>2   :<C-U>setlocal lcs=tab:>-,trail:-,eol:$ list! list? <CR>

" Type \3 to enable/disable paste mode
nnoremap    <leader>3   :set invpaste paste?<CR>

" Type \4 to show/not show line numbers
nnoremap    <leader>4   :set invnumber<CR>

" Type \43 to change number mode
nnoremap    <Leader>43  :ToggleNumber<CR>

" Type \5 to highlight/not highlight search results
nnoremap    <leader>5   :set hls!<CR>:set hls?<CR>

" Type \6 to search keyword with case ignorance
nnoremap    <leader>6   :set ignorecase!<CR>:set ignorecase?<CR>

" Type \7 to open tagbar
nnoremap    <leader>7   :TagbarToggle<CR>

" Type \8 to autoformat C
nnoremap    <leader>8   :Autoformat<CR>

" Type \v then press enter to edit ~/.vimrc
nnoremap    <leader>v   :e ~/.vimrc

" Type \t then press enter to edit ~/.tmux.conf
nnoremap    <leader>t   :e ~/.tmux.conf

" Type \b then press enter to edit ~/.bashrc
nnoremap    <leader>b   :e ~/.bashrc

" Type \ev to edit ~/.vimrc in spit panel
nnoremap    <leader>ev  :vsplit $MYVIMRC<cr>

" Type \sv to source ~/.vimrc
nnoremap    <leader>sv  :source $MYVIMRC<cr>

" Type \" to double quote one word
nnoremap    <leader>"   viw<esc>a"<esc>hbi"<esc>lbl

" Type \' to single quote one word
nnoremap    <leader>'   viw<esc>a'<esc>hbi'<esc>lbl

" Type \l" to double quote one line
nnoremap    <leader>l"  ^i"<esc>$a"<esc>^

" Type \l' to single quote one line
nnoremap    <leader>l'  ^i'<esc>$a'<esc>^

" Type \n to open NERDTree
nnoremap    <leader>gn  :NERDTreeToggle<CR>

" Type \p to open CtrlP
nnoremap    <leader>p   :CtrlP<CR>

" Type \u to convert to lower case
nnoremap    <leader>u   viwu<esc>

" Type \U to convert to UPPER case
nnoremap    <leader>U   viwU<esc>

" Type space to fold/unfold
nnoremap    <space> za

" Type \r to retab
nnoremap    <Leader>r   :retab<CR>

" Type \it to insert timestamp
nnoremap    <Leader>it  "=strftime("%c")<CR>P

" Type \idf to turn on or off the indent lines
nnoremap    <Leader>idf :IndentLinesToggle<CR>

" Type \sc for spell checking
nnoremap    <Leader>sc  :set spell spelllang=en_us<CR>
" Type \nsc to turn off checking
nnoremap    <Leader>nsc :set nospell<CR>

" Type \fp to reformat paragraph
nnoremap    <Leader>fp  gq<CR>

" Type \sx to parse info (18z/infoparser)
nnoremap    <Leader>sx  :call Parse()<CR>

" s: Find this C symbol
nnoremap    <leader>fs  :call cscope#find('s', expand('<cword>'))<CR>
" g: Find this definition
nnoremap    <leader>fg  :call cscope#find('g', expand('<cword>'))<CR>
" d: Find functions called by this function
nnoremap    <leader>fd  :call cscope#find('d', expand('<cword>'))<CR>
" c: Find functions calling this function
nnoremap    <leader>fc  :call cscope#find('c', expand('<cword>'))<CR>
" t: Find this text string
nnoremap    <leader>ft  :call cscope#find('t', expand('<cword>'))<CR>
" e: Find this egrep pattern
nnoremap    <leader>fe  :call cscope#find('e', expand('<cword>'))<CR>
" f: Find this file
nnoremap    <leader>ff  :call cscope#find('f', expand('<cword>'))<CR>
" i: Find files #including this file
nnoremap    <leader>fi  :call cscope#find('i', expand('<cword>'))<CR>

" open line in github
nnoremap    <leader>o   :!echo `git url`/blob/`git rev-parse --abbrev-ref HEAD`/%\#L<C-R>=line('.')<CR> \| xargs firefox<CR><CR>

" sort imports alphabetically
nnoremap    <leader>i :!isort %<CR><CR>

" Type . to apply the . command to execute a stored action
" against the selection. The “.” allows us to simply
" re-execute that last command
vnoremap    . :norm.<CR>

" Type \jp to preview formatted json
" Type \jw to write formatted json

" Type qa to start recording a macro named “a”
" Type q to stop recording
" Type @a to play back the macro

" Type \\w for easymotion

" Use upper J to move down visual block
vnoremap J :m '>+1<CR>gv=gv
" Use upper K to move down visual block
vnoremap K :m '<-2<CR>gv=gv

" ruler - show red blocks when length is over 80
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

" autocmd for python
augroup filetype_python
    autocmd!
    autocmd BufRead,BufNewFile *.py set filetype=python
    autocmd FileType python set tabstop=4
    autocmd FileType python set shiftwidth=4
    autocmd FileType python set expandtab
    autocmd FileType python set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
    autocmd FileType python :call CheckAndLoadTags()
    autocmd FileType python TagbarOpen
    " autocmd FileType python NERDTree
    autocmd FileType python iabbrev shabang #!/usr/bin/env python<cr># -*- coding: utf-8 -*-<cr>
augroup END

" autocmd for bash
augroup filetype_bash
    autocmd!
    " autocmd BufRead,BufNewFile *.sh set filetype=bash
    autocmd FileType bash set tabstop=4
    autocmd FileType bash set shiftwidth=4
    autocmd FileType bash set expandtab
    autocmd FileType bash iabbrev shabang #!/bin/bash<cr>
augroup END

" autocmd for c
augroup filetype_c
    autocmd!
    autocmd BufRead,BufNewFile *.c set filetype=c
    autocmd FileType c :call CheckAndLoadTags()
    autocmd FileType c TagbarOpen
    "Tagbar generates the tag information by itself
    "and doesn't need (or use)
    "already existing tag files.
augroup END

" Autocmd for ctags
function! CheckAndLoadTags()
    if file_readable("~/.ctags/tags")
        set tags=~/.ctags/tags
    endif
endfunction

" If buffer modified, update any 'Last modified: ' in the first 20 lines.
" 'Last modified: ' can have up to 10 characters before (they are retained).
" Restores cursor and window position using save_cursor variable.
function! LastModified()
    if &modified
        let save_cursor = getpos(".")
        let n = min([20, line("$")])
        keepjumps exe '1,' . n . 's#^\(.\{,10}Last modified: \).*#\1' .
                    \ strftime('%a %b %d, %Y  %I:%M%p') . '#e'
        call histdel('search', -1)
        call setpos('.', save_cursor)
    endif
endfun

" Auto load plugins
call vundle#end()            " required
filetype plugin indent on    " required

" auto add timestamp to last modified
autocmd BufWritePre * call LastModified()

" remove tailing spaces upon saving the file
autocmd BufWritePre * :%s/\s\+$//e

" auto retab upon saving the file
autocmd BufWritePre * :retab

" auto format C, python files upon saving
" autocmd BufWrite * :Autoformat
"
" auto format Python upon saving the file
" autocmd BufWritePost *.py :PyFlakeAuto
