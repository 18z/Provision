set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"let path = '~/some/path/here'
"call vundle#rc(path)

" let Vundle manage Vundle, required
Plugin 'gmarik/vundle'

" :TagbarToggle
Plugin 'majutsushi/tagbar'

" markdown
Plugin 'tpope/vim-markdown'

syntax on

" ruler
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%81v.\+/

" search highlight
set hlsearch

set number
set encoding=utf-8
set tabstop=4
set shiftwidth=4
set expandtab
set laststatus=2        "Displaying status line always

" start of status line settings
set statusline=%f
set statusline+=\ %y
set statusline+=%=
set statusline+=%l
set statusline+=,
set statusline+=%c
set statusline+=:
set statusline+=%L
set statusline+=\[%p%%\]
" end of status line settings

map         <F9> :Tlist<CR>
nmap        <F8> :TagbarToggle<CR>
nnoremap    <F2> :<C-U>setlocal lcs=tab:>-,trail:-,eol:$ list! list? <CR>
map <leader>v :e ~/.vimrc
map <leader>t :e ~/.tmux.conf
map <leader>b :e ~/.bashrc 

" autocmd for python
augroup filetype_python
    autocmd!
    autocmd BufRead,BufNewFile *.py set filetype=python
    autocmd FileType python TagbarOpen
    autocmd FileType python set tabstop=4
    autocmd FileType python set shiftwidth=4
    autocmd FileType python set expandtab
    autocmd FileType python set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class,with
    autocmd FileType python :call CheckAndLoadTags()
    autocmd FileType python TagbarOpen
    autocmd FileType python iabbrev pythonHead #!/usr/bin/env python<cr># -*- coding: utf-8 -*-<cr>
augroup END

function! CheckAndLoadTags()
    if file_readable("./tags")
        set tag=tags
    endif
endfunction
